//<File !Start!>
// FILE: [GUI_GSLC.h]
// Created by GUIslice Builder version: [0.17.b38]
//
// GUIslice Builder Generated GUI Framework File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<File !End!>

#ifndef _GUISLICE_GEN_H
#define _GUISLICE_GEN_H

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include "GUIslice.h"
#include "GUIslice_drv.h"

// Include any extended elements
//<Includes !Start!>
//<Includes !End!>

// ------------------------------------------------
// Headers and Defines for fonts
// Note that font files are located within the Adafruit-GFX library folder:
// ------------------------------------------------
//<Fonts !Start!>
#if !defined(DRV_DISP_TFT_ESPI)
  #error E_PROJECT_OPTIONS tab->Graphics Library should be Adafruit_GFX
#endif
#include <TFT_eSPI.h>
//<Fonts !End!>

// ------------------------------------------------
// Defines for resources
// ------------------------------------------------
//<Resources !Start!>
#define IMG_HOME                  "/home.bmp"
#define IMG_HOME_SEL              "/home.bmp"
#define IMG_SETTINGS              "/settings.bmp"
#define IMG_SETTINGS_SEL          "/settings.bmp"
//<Resources !End!>

// ------------------------------------------------
// Enumerations for pages, elements, fonts, images
// ------------------------------------------------
//<Enum !Start!>
enum {E_PG_BASE,E_PG_MAIN,E_PG_Settings,E_PG_RFID,E_PG_SubGHz,E_PG_WIFI
      ,E_PG_USB,E_PG_BLE,E_PG_IR};
enum {E_DRAW_Base_TopBar,E_ELEM_Base_Button_Home
      ,E_ELEM_Base_Button_Settings,E_ELEM_Base_Text_Bat
      ,E_ELEM_Base_Text_PageLabel,E_ELEM_Main_Button_BLE
      ,E_ELEM_Main_Button_IR,E_ELEM_Main_Button_RFID
      ,E_ELEM_Main_Button_SubGHz,E_ELEM_Main_Button_USB
      ,E_ELEM_Main_Button_WIFI};
// Must use separate enum for fonts with MAX_FONT at end to use gslc_FontSet.
enum {E_BUILTIN10X16,MAX_FONT};
//<Enum !End!>

// ------------------------------------------------
// Instantiate the GUI
// ------------------------------------------------

// ------------------------------------------------
// Define the maximum number of elements and pages
// ------------------------------------------------
//<ElementDefines !Start!>
#define MAX_PAGE                9

#define MAX_ELEM_PG_BASE 5 // # Elems total on page
#define MAX_ELEM_PG_BASE_RAM MAX_ELEM_PG_BASE // # Elems in RAM

#define MAX_ELEM_PG_MAIN 6 // # Elems total on page
#define MAX_ELEM_PG_MAIN_RAM MAX_ELEM_PG_MAIN // # Elems in RAM

#define MAX_ELEM_PG_Settings 0 // # Elems total on page
#define MAX_ELEM_PG_Settings_RAM MAX_ELEM_PG_Settings // # Elems in RAM

#define MAX_ELEM_PG_RFID 0 // # Elems total on page
#define MAX_ELEM_PG_RFID_RAM MAX_ELEM_PG_RFID // # Elems in RAM

#define MAX_ELEM_PG_SubGHz 0 // # Elems total on page
#define MAX_ELEM_PG_SubGHz_RAM MAX_ELEM_PG_SubGHz // # Elems in RAM

#define MAX_ELEM_PG_WIFI 0 // # Elems total on page
#define MAX_ELEM_PG_WIFI_RAM MAX_ELEM_PG_WIFI // # Elems in RAM

#define MAX_ELEM_PG_USB 0 // # Elems total on page
#define MAX_ELEM_PG_USB_RAM MAX_ELEM_PG_USB // # Elems in RAM

#define MAX_ELEM_PG_BLE 0 // # Elems total on page
#define MAX_ELEM_PG_BLE_RAM MAX_ELEM_PG_BLE // # Elems in RAM

#define MAX_ELEM_PG_IR 0 // # Elems total on page
#define MAX_ELEM_PG_IR_RAM MAX_ELEM_PG_IR // # Elems in RAM
//<ElementDefines !End!>

// ------------------------------------------------
// Create element storage
// ------------------------------------------------
gslc_tsGui                      m_gui;
gslc_tsDriver                   m_drv;
gslc_tsFont                     m_asFont[MAX_FONT];
gslc_tsPage                     m_asPage[MAX_PAGE];

//<GUI_Extra_Elements !Start!>
gslc_tsElem                     m_asBasePage1Elem[MAX_ELEM_PG_BASE_RAM];
gslc_tsElemRef                  m_asBasePage1ElemRef[MAX_ELEM_PG_BASE];
gslc_tsElem                     m_asPage1Elem[MAX_ELEM_PG_MAIN_RAM];
gslc_tsElemRef                  m_asPage1ElemRef[MAX_ELEM_PG_MAIN];
gslc_tsElem                     m_asPage3Elem[MAX_ELEM_PG_Settings_RAM];
gslc_tsElemRef                  m_asPage3ElemRef[MAX_ELEM_PG_Settings];
gslc_tsElem                     m_asPage4Elem[MAX_ELEM_PG_RFID_RAM];
gslc_tsElemRef                  m_asPage4ElemRef[MAX_ELEM_PG_RFID];
gslc_tsElem                     m_asPage5Elem[MAX_ELEM_PG_SubGHz_RAM];
gslc_tsElemRef                  m_asPage5ElemRef[MAX_ELEM_PG_SubGHz];
gslc_tsElem                     m_asPage6Elem[MAX_ELEM_PG_WIFI_RAM];
gslc_tsElemRef                  m_asPage6ElemRef[MAX_ELEM_PG_WIFI];
gslc_tsElem                     m_asPage7Elem[MAX_ELEM_PG_USB_RAM];
gslc_tsElemRef                  m_asPage7ElemRef[MAX_ELEM_PG_USB];
gslc_tsElem                     m_asPage8Elem[MAX_ELEM_PG_BLE_RAM];
gslc_tsElemRef                  m_asPage8ElemRef[MAX_ELEM_PG_BLE];
gslc_tsElem                     m_asPage9Elem[MAX_ELEM_PG_IR_RAM];
gslc_tsElemRef                  m_asPage9ElemRef[MAX_ELEM_PG_IR];

#define MAX_STR                 200

//<GUI_Extra_Elements !End!>

// ------------------------------------------------
// Program Globals
// ------------------------------------------------

// Element References for direct access
//<Extern_References !Start!>
extern gslc_tsElemRef* m_pElemOutTxt1;
extern gslc_tsElemRef* m_pElemOutTxt2;
//<Extern_References !End!>

// Define debug message function
static int16_t DebugOut(char ch);

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
bool CbBtnCommon(void* pvGui,void *pvElemRef,gslc_teTouch eTouch,int16_t nX,int16_t nY);
bool CbCheckbox(void* pvGui, void* pvElemRef, int16_t nSelId, bool bState);
bool CbDrawScanner(void* pvGui,void* pvElemRef,gslc_teRedrawType eRedraw);
bool CbKeypad(void* pvGui, void *pvElemRef, int16_t nState, void* pvData);
bool CbListbox(void* pvGui, void* pvElemRef, int16_t nSelId);
bool CbSlidePos(void* pvGui,void* pvElemRef,int16_t nPos);
bool CbSpinner(void* pvGui, void *pvElemRef, int16_t nState, void* pvData);
bool CbTickScanner(void* pvGui,void* pvScope);

// ------------------------------------------------
// Create page elements
// ------------------------------------------------
void InitGUIslice_gen()
{
  gslc_tsElemRef* pElemRef = NULL;

  if (!gslc_Init(&m_gui,&m_drv,m_asPage,MAX_PAGE,m_asFont,MAX_FONT)) { return; }

  // ------------------------------------------------
  // Load Fonts
  // ------------------------------------------------
//<Load_Fonts !Start!>
    if (!gslc_FontSet(&m_gui,E_BUILTIN10X16,GSLC_FONTREF_PTR,NULL,2)) { return; }
//<Load_Fonts !End!>

//<InitGUI !Start!>
  gslc_PageAdd(&m_gui,E_PG_BASE,m_asBasePage1Elem,MAX_ELEM_PG_BASE_RAM,m_asBasePage1ElemRef,MAX_ELEM_PG_BASE);
  gslc_PageAdd(&m_gui,E_PG_MAIN,m_asPage1Elem,MAX_ELEM_PG_MAIN_RAM,m_asPage1ElemRef,MAX_ELEM_PG_MAIN);
  gslc_PageAdd(&m_gui,E_PG_Settings,m_asPage3Elem,MAX_ELEM_PG_Settings_RAM,m_asPage3ElemRef,MAX_ELEM_PG_Settings);
  gslc_PageAdd(&m_gui,E_PG_RFID,m_asPage4Elem,MAX_ELEM_PG_RFID_RAM,m_asPage4ElemRef,MAX_ELEM_PG_RFID);
  gslc_PageAdd(&m_gui,E_PG_SubGHz,m_asPage5Elem,MAX_ELEM_PG_SubGHz_RAM,m_asPage5ElemRef,MAX_ELEM_PG_SubGHz);
  gslc_PageAdd(&m_gui,E_PG_WIFI,m_asPage6Elem,MAX_ELEM_PG_WIFI_RAM,m_asPage6ElemRef,MAX_ELEM_PG_WIFI);
  gslc_PageAdd(&m_gui,E_PG_USB,m_asPage7Elem,MAX_ELEM_PG_USB_RAM,m_asPage7ElemRef,MAX_ELEM_PG_USB);
  gslc_PageAdd(&m_gui,E_PG_BLE,m_asPage8Elem,MAX_ELEM_PG_BLE_RAM,m_asPage8ElemRef,MAX_ELEM_PG_BLE);
  gslc_PageAdd(&m_gui,E_PG_IR,m_asPage9Elem,MAX_ELEM_PG_IR_RAM,m_asPage9ElemRef,MAX_ELEM_PG_IR);

  // Now mark E_PG_BASE as a "base" page which means that it's elements
  // are always visible. This is useful for common page elements.
  gslc_SetPageBase(&m_gui, E_PG_BASE);


  // NOTE: The current page defaults to the first page added. Here we explicitly
  //       ensure that the main page is the correct page no matter the add order.
  gslc_SetPageCur(&m_gui,E_PG_MAIN);
  
  // Set Background to a flat color
  gslc_SetBkgndColor(&m_gui,GSLC_COL_BLACK);

  // -----------------------------------
  // PAGE: E_PG_BASE
  
  
  // Create E_ELEM_Base_Button_Home button with image label
  pElemRef = gslc_ElemCreateBtnImg(&m_gui,E_ELEM_Base_Button_Home,E_PG_BASE,(gslc_tsRect){16,9,32,32},
          gslc_GetImageFromProg((const unsigned char*)IMG_HOME,GSLC_IMGREF_FMT_BMP24),
          gslc_GetImageFromProg((const unsigned char*)IMG_HOME_SEL,GSLC_IMGREF_FMT_BMP24),
          &CbBtnCommon);
  
  // Create E_ELEM_Base_Button_Settings button with image label
  pElemRef = gslc_ElemCreateBtnImg(&m_gui,E_ELEM_Base_Button_Settings,E_PG_BASE,(gslc_tsRect){56,9,32,32},
          gslc_GetImageFromProg((const unsigned char*)IMG_SETTINGS,GSLC_IMGREF_FMT_BMP24),
          gslc_GetImageFromProg((const unsigned char*)IMG_SETTINGS_SEL,GSLC_IMGREF_FMT_BMP24),
          &CbBtnCommon);
  
  // Create E_ELEM_Base_Text_PageLabel runtime modifiable text
  static char m_sDisplayText1[16] = "Main Menu";
  pElemRef = gslc_ElemCreateTxt(&m_gui,E_ELEM_Base_Text_PageLabel,E_PG_BASE,(gslc_tsRect){70,18,180,16},
    (char*)m_sDisplayText1,16,E_BUILTIN10X16);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_MID);
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  m_pElemOutTxt1 = pElemRef;
  
  // Create E_ELEM_Base_Text_Bat runtime modifiable text
  static char m_sDisplayText2[6] = 10%;
  pElemRef = gslc_ElemCreateTxt(&m_gui,E_ELEM_Base_Text_Bat,E_PG_BASE,(gslc_tsRect){243,19,60,16},
    (char*)m_sDisplayText2,6,E_BUILTIN10X16);
  gslc_ElemSetTxtAlign(&m_gui,pElemRef,GSLC_ALIGN_MID_RIGHT);
  gslc_ElemSetFillEn(&m_gui,pElemRef,false);
  m_pElemOutTxt2 = pElemRef;

  // Create E_DRAW_Base_TopBar line 
  pElemRef = gslc_ElemCreateLine(&m_gui,E_DRAW_Base_TopBar,E_PG_BASE,0,49,320,49);
  gslc_ElemSetCol(&m_gui,pElemRef,GSLC_COL_BLACK,GSLC_COL_GRAY_LT3,GSLC_COL_GRAY_LT3);

  // -----------------------------------
  // PAGE: E_PG_MAIN
  
  
  // create E_ELEM_Main_Button_RFID button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_RFID,E_PG_MAIN,
    (gslc_tsRect){48,80,80,40},(char*)"RFID",0,E_BUILTIN10X16,&CbBtnCommon);
  
  // create E_ELEM_Main_Button_SubGHz button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_SubGHz,E_PG_MAIN,
    (gslc_tsRect){176,80,80,40},(char*)"Sub-GHz",0,E_BUILTIN10X16,&CbBtnCommon);
  
  // create E_ELEM_Main_Button_WIFI button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_WIFI,E_PG_MAIN,
    (gslc_tsRect){48,208,80,40},(char*)"WiFi",0,E_BUILTIN10X16,&CbBtnCommon);
  
  // create E_ELEM_Main_Button_USB button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_USB,E_PG_MAIN,
    (gslc_tsRect){48,336,80,40},(char*)"Bad USB",0,E_BUILTIN10X16,&CbBtnCommon);
  
  // create E_ELEM_Main_Button_BLE button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_BLE,E_PG_MAIN,
    (gslc_tsRect){176,208,80,40},(char*)"BLE",0,E_BUILTIN10X16,&CbBtnCommon);
  
  // create E_ELEM_Main_Button_IR button with text label
  pElemRef = gslc_ElemCreateBtnTxt(&m_gui,E_ELEM_Main_Button_IR,E_PG_MAIN,
    (gslc_tsRect){176,336,80,40},(char*)"IR",0,E_BUILTIN10X16,&CbBtnCommon);

  // -----------------------------------
  // PAGE: E_PG_Settings
  

  // -----------------------------------
  // PAGE: E_PG_RFID
  

  // -----------------------------------
  // PAGE: E_PG_SubGHz
  

  // -----------------------------------
  // PAGE: E_PG_WIFI
  

  // -----------------------------------
  // PAGE: E_PG_USB
  

  // -----------------------------------
  // PAGE: E_PG_BLE
  

  // -----------------------------------
  // PAGE: E_PG_IR
  
//<InitGUI !End!>

//<Startup !Start!>
  gslc_GuiRotate(&m_gui, 0);
//<Startup !End!>

}

#endif // end _GUISLICE_GEN_H
