//<App !Start!>
// FILE: [GUI.ino]
// Created by GUIslice Builder version: [0.17.b40]
//
// GUIslice Builder Generated File
//
// For the latest guides, updates and support view:
// https://github.com/ImpulseAdventure/GUIslice
//
//<App !End!>

// ------------------------------------------------
// Headers to include
// ------------------------------------------------
#include <Arduino.h>
#include <FS.h>
#include <SD.h>
#include <SPI.h>

#include "GUI_GSLC.h"
#include "TFT_eSPI.h"

// ------------------------------------------------
// Program Globals
// ------------------------------------------------
bool bootScreen = true;
int deauthStatus = 0;

// Save some element references for direct access
//<Save_References !Start!>
gslc_tsElemRef* m_pElemListbox1 = NULL;
gslc_tsElemRef* m_pElemOutTxt1 = NULL;
gslc_tsElemRef* m_pElemOutTxt2 = NULL;
gslc_tsElemRef* m_pListSlider1 = NULL;
gslc_tsElemRef* m_pWiFiDeauthButtonTxt = NULL;
//<Save_References !End!>

// Define debug message function
static int16_t DebugOut(char ch) {
    if (ch == (char)'\n')
        Serial.println("");
    else
        Serial.write(ch);
    return 0;
}

// ------------------------------------------------
// Callback Methods
// ------------------------------------------------
// Common Button callback
bool CbBtnCommon(void* pvGui, void* pvElemRef, gslc_teTouch eTouch, int16_t nX, int16_t nY) {
    // Typecast the parameters to match the GUI and element types
    gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);
    gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
    gslc_tsElem* pElem = gslc_GetElemFromRef(pGui, pElemRef);

    if (eTouch == GSLC_TOUCH_UP_IN) {
        // From the element's ID we can determine which button was pressed.
        switch (pElem->nId) {
                //<Button Enums !Start!>
            case Base_Button_home:
                gslc_SetPageCur(&m_gui, E_PG_MAIN);
                break;
            case Base_Button_settings:
                gslc_SetPageCur(&m_gui, E_PG_Settings);
                break;
            case Main_Button_RFID:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "RFID");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_RFID);
                break;
            case Main_Button_SubGHz:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "Sub GHz");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_SubGHz);
                break;
            case Main_Button_WIFI:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "WiFi");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_WIFI);
                break;
            case Main_Button_BadUSB:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "Bad USB");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_USB);
                break;
            case Main_Button_BLE:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "Bluetooth");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_BLE);
                break;
            case Main_Button_IR:
                gslc_ElemSetTxtStr(&m_gui, m_pElemOutTxt1, "IR");
                // delay(1);
                gslc_SetPageCur(&m_gui, E_PG_IR);
                break;
            case Settings_Button_calibrateTouch:
                break;
            case Settings_Button_vibrationToggle:
                break;
            case WiFi_Button_rickRollBeacon:
                break;
            case WiFi_Button_scanNetworks:
                break;
            case WiFi_Button_deauth:
                if (deauthStatus == 0) {
                    deauthStatus = 1;
                    // Set the button text to "Deauthentication Enabled"
                    gslc_ElemSetTxtStr(&m_gui, m_pWiFiDeauthButtonTxt, "Deauthentication Enabled");
                    // Set the button color to green
                    gslc_ElemSetCol(&m_gui, m_pWiFiDeauthButtonTxt, GSLC_COL_BLUE_DK2, GSLC_COL_GREEN_DK3, GSLC_COL_BLUE_DK1);
                } else {
                    deauthStatus = 0;
                    // Set the button text to "Deauthentication Disabled"
                    gslc_ElemSetTxtStr(&m_gui, m_pWiFiDeauthButtonTxt, "Deauthentication Disabled");
                    // Set the button color to red
                    gslc_ElemSetCol(&m_gui, m_pWiFiDeauthButtonTxt, GSLC_COL_BLUE_DK2, GSLC_COL_RED_DK2, GSLC_COL_BLUE_DK1);
                }

                break;
            case WiFi_Button_handshakePassive:
                break;
                //<Button Enums !End!>
            default:
                break;
        }
    }
    return true;
}
//<Checkbox Callback !Start!>
//<Checkbox Callback !End!>
//<Keypad Callback !Start!>
//<Keypad Callback !End!>
//<Spinner Callback !Start!>
//<Spinner Callback !End!>
bool CbListbox(void* pvGui, void* pvElemRef, int16_t nSelId) {
    gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);
    gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
    gslc_tsElem* pElem = gslc_GetElemFromRef(pGui, pElemRef);
    char acTxt[MAX_STR + 1];

    if (pElemRef == NULL) {
        return false;
    }

    // From the element's ID we can determine which listbox was active.
    switch (pElem->nId) {
            //<Listbox Enums !Start!>

        case WiFi_Listbox_networks:
            if (nSelId != XLISTBOX_SEL_NONE) {
                gslc_ElemXListboxGetItem(&m_gui, pElemRef, nSelId, acTxt, MAX_STR);
            }
            break;
            //<Listbox Enums !End!>
        default:
            break;
    }
    return true;
}
//<Draw Callback !Start!>
//<Draw Callback !End!>

// Callback function for when a slider's position has been updated
bool CbSlidePos(void* pvGui, void* pvElemRef, int16_t nPos) {
    gslc_tsGui* pGui = (gslc_tsGui*)(pvGui);
    gslc_tsElemRef* pElemRef = (gslc_tsElemRef*)(pvElemRef);
    gslc_tsElem* pElem = gslc_GetElemFromRef(pGui, pElemRef);
    int16_t nVal;

    // From the element's ID we can determine which slider was updated.
    switch (pElem->nId) {
            //<Slider Enums !Start!>
        case E_LISTSCROLL1:
            // Fetch the slider position
            nVal = gslc_ElemXSliderGetPos(pGui, m_pListSlider1);
            break;

            //<Slider Enums !End!>
        default:
            break;
    }

    return true;
}
//<Tick Callback !Start!>
//<Tick Callback !End!>

void setup() {
    // ------------------------------------------------
    // Initialize
    // ------------------------------------------------
    delay(250);

    Serial.begin(115200);

    // delay(125);

    gslc_InitDebug(&DebugOut);

    // delay(250);

    // SPI.begin(39, 41, 40, 42);
    // if (!SD.begin(42)) {
    //     Serial.println("Card Mount Failed");
    //     return;
    // } else {
    //     Serial.println("Card Mount Worked");
    // }

    delay(500);

    // ------------------------------------------------
    // Create graphic elements
    // ------------------------------------------------
    InitGUIslice_gen();

    // Show popup page for 1.5 seconds
    long nDelay = 1500;
    long nStart = millis();
    gslc_PopupShow(&m_gui, E_PG_POPUP_Boot, false);
    gslc_Update(&m_gui);
    while (millis() - nStart < nDelay && bootScreen) {
    }
    gslc_PopupHide(&m_gui);
}

// -----------------------------------
// Main event loop
// -----------------------------------
void loop() {
    // ------------------------------------------------
    // Update GUI Elements
    // ------------------------------------------------

    // TODO - Add update code for any text, gauges, or sliders
    //   delayMicroseconds(1);

    // ------------------------------------------------
    // Periodically call GUIslice update function
    // ------------------------------------------------
    gslc_Update(&m_gui);
}
